'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = transformImportsWithAliases;

var _path = require('path');

var _babelTypes = require('babel-types');

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_WEBPACK_PATH = 'webpack.config.js';
var PACKAGE_JSON_PATH = 'package.json';

var packageJson = require(_findUp2.default.sync(PACKAGE_JSON_PATH));
var dependencies = Object.keys(Object.assign({}, packageJson.dependencies || {}, packageJson.peerDependencies || {}, packageJson.devDependencies || {}));

function getConfig(_ref) {
    var _ref$config = _ref.config,
        configPath = _ref$config === undefined ? DEFAULT_WEBPACK_PATH : _ref$config,
        _ref$findConfig = _ref.findConfig,
        findConfig = _ref$findConfig === undefined ? false : _ref$findConfig;

    // Get webpack config
    var resolvedConfigPath = findConfig ? _findUp2.default.sync(configPath) : (0, _path.resolve)(process.cwd(), configPath);

    var requiredConfig = require(resolvedConfigPath);
    if (requiredConfig && requiredConfig.__esModule && requiredConfig.default) {
        requiredConfig = requiredConfig.default;
    }

    var config = requiredConfig;
    if (typeof requiredConfig === 'function') {
        config = requiredConfig(process.env.NODE_ENV);
    }

    return config;
}

function transformFilePathWithAliases(aliasConf, filePath, currentWorkingDirectory) {
    for (var aliasFrom in aliasConf) {
        if (aliasConf.hasOwnProperty(aliasFrom)) {
            var aliasTo = aliasConf[aliasFrom];

            // If the regex matches, replace by the right config
            var aliasFromRegex = new RegExp('^' + aliasFrom + '(/|$)');
            if (aliasFromRegex.test(filePath)) {
                if (dependencies.includes(aliasTo)) {
                    return filePath.replace(aliasFrom, aliasTo);
                }

                // If the filepath is not absolute, make it absolute
                if (!(0, _path.isAbsolute)(aliasTo)) {
                    aliasTo = (0, _path.join)(process.cwd(), aliasTo);
                }

                var relativeAliasPath = (0, _path.relative)(currentWorkingDirectory, aliasTo).replace(/\\/g, '/');

                if (relativeAliasPath.length === 0) {
                    relativeAliasPath = '.';
                }

                var aliasFilePath = filePath.replace(aliasFrom, relativeAliasPath);

                return aliasFilePath.charAt(0) === '.' ? aliasFilePath : './' + aliasFilePath;
            }
        }
    }

    return filePath;
}

function transformImportsWithAliases(_ref2) {
    var t = _ref2.types;

    return {
        visitor: {
            ImportDeclaration(path, _ref3) {
                var filename = _ref3.file.opts.filename,
                    _ref3$opts = _ref3.opts,
                    opts = _ref3$opts === undefined ? {
                    config: DEFAULT_WEBPACK_PATH,
                    findConfig: false
                } : _ref3$opts;

                // Get webpack config
                var config = getConfig(opts);

                // If the config comes back as null, we didn't find it, so throw an exception.
                if (!config) {
                    throw new Error('Cannot find configuration file: ' + opts.config);
                }

                // Exit if there's no alias config
                if (!config.resolve || !config.resolve.alias) {
                    return;
                }

                // Get the webpack alias config
                var aliasConf = config.resolve.alias;

                var source = path.node.source;
                // Exit if the import path is not a string literal

                if (!t.isStringLiteral(source)) {
                    return;
                }

                // Get the path of the StringLiteral
                var originalFilePath = source.value;
                var requiredFilePath = transformFilePathWithAliases(aliasConf, originalFilePath, (0, _path.dirname)(filename));

                path.node.source = (0, _babelTypes.StringLiteral)(requiredFilePath);
            },
            CallExpression(path, _ref4) {
                var filename = _ref4.file.opts.filename,
                    _ref4$opts = _ref4.opts,
                    opts = _ref4$opts === undefined ? {
                    config: DEFAULT_WEBPACK_PATH,
                    findConfig: false
                } : _ref4$opts;

                // Get webpack config
                var config = getConfig(opts);

                // If the config comes back as null, we didn't find it, so throw an exception.
                if (!config) {
                    throw new Error('Cannot find configuration file: ' + opts.config);
                }

                // Exit if there's no alias config
                if (!config.resolve || !config.resolve.alias) {
                    return;
                }

                // Get the webpack alias config
                var aliasConf = config.resolve.alias;

                var _path$node = path.node,
                    calleeName = _path$node.callee.name,
                    args = _path$node.arguments;
                // Exit if it's not a require statement

                if (calleeName !== 'require' || !args.length || !t.isStringLiteral(args[0])) {
                    return;
                }

                // Get the path of the StringLiteral
                var originalFilePath = args[0].value;
                var requiredFilePath = transformFilePathWithAliases(aliasConf, originalFilePath, (0, _path.dirname)(filename));

                path.node.arguments = [(0, _babelTypes.StringLiteral)(requiredFilePath)];
            }
        }
    };
}